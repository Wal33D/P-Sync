CS4540 – Operating Systems
Assignment 4. Process Synchronization
Due November 20

FOR THE GRADER: 

		Extra Credit Specifications Met

COMPILE NOTE: 

		"make" to compile, "./pSync" to run

SPECS:

	Write a multithreaded version of this algorithm that creates five
	threads, each of which:

		(i) generates a predefined number of random points

		(ii) determines if the points fall within the circle, and 

		(iii) counts the number of points that fall within the circle.
	
	Each thread updates the shared global count circleCount of all points that fall within the circle. Protect against
	race conditions on updates to circleCount by using mutex locks.
	When all thread have exited, the parent thread will calculate and output the estimated value of π.

DESCRIPTION:

	An interesting way of calculating π is to use a technique known as Monte Carlo simulation.
	This algorithm works as follows:

	a) Suppose you have a circle inscribed within a square, as
	shown in Figure 1. The radius of this circle is 1.

	b) Generate a series of random points as simple (x, y)
	coordinates. These points must fall within the Cartesian
	coordinates that bound the square. Of the total number of
	random points that are generated, some will occur within the
	circle.

	c) Estimate π by performing the following calculation:
	π = 4× (number of points in circle) /
	/ (total number of points)
	Write a multithreaded version of this algorithm that creates five
	threads, each of which: (i) generates a predefined number of random
	points, (ii) determines if the points fall within the circle, and (iii)
	counts the number of points that fall within the circle.
	Figure 1. Calculating π with the Monte Carlo technique.
	Each thread will have to update the shared global count circleCount of all points that fall within the circle. Protect against
	race conditions on updates to circleCount by using mutex locks.
	When all thread have exited, the parent thread will calculate and output the estimated value of π.

			
	Print (with proper labels) the estimated value of π for each thread before it exits. This will allow us to see different
	estimates of π: (i) as calculated individually by each thread, and (ii) as estimated by all threads together.
	Requirements and Hints

	1) Use the constant NR_PTS for the total number of points; set it to 10,000,000.

	2) Use the constant NR_THREADS determining the number of threads used to generate random points and count the
	number of points that occur within the circle.

	3) Note that mutex locks are available in Pthreads.
